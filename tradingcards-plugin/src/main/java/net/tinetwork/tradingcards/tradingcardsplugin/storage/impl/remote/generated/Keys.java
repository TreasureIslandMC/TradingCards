/*
 * This file is generated by jOOQ.
 */
package net.tinetwork.tradingcards.tradingcardsplugin.storage.impl.remote.generated;


import net.tinetwork.tradingcards.tradingcardsplugin.storage.impl.remote.generated.tables.Cards;
import net.tinetwork.tradingcards.tradingcardsplugin.storage.impl.remote.generated.tables.CustomTypes;
import net.tinetwork.tradingcards.tradingcardsplugin.storage.impl.remote.generated.tables.Decks;
import net.tinetwork.tradingcards.tradingcardsplugin.storage.impl.remote.generated.tables.Packs;
import net.tinetwork.tradingcards.tradingcardsplugin.storage.impl.remote.generated.tables.PacksContent;
import net.tinetwork.tradingcards.tradingcardsplugin.storage.impl.remote.generated.tables.Rarities;
import net.tinetwork.tradingcards.tradingcardsplugin.storage.impl.remote.generated.tables.Rewards;
import net.tinetwork.tradingcards.tradingcardsplugin.storage.impl.remote.generated.tables.Series;
import net.tinetwork.tradingcards.tradingcardsplugin.storage.impl.remote.generated.tables.Users;
import net.tinetwork.tradingcards.tradingcardsplugin.storage.impl.remote.generated.tables.SeriesColors;
import net.tinetwork.tradingcards.tradingcardsplugin.storage.impl.remote.generated.tables.records.CardsRecord;
import net.tinetwork.tradingcards.tradingcardsplugin.storage.impl.remote.generated.tables.records.CustomTypesRecord;
import net.tinetwork.tradingcards.tradingcardsplugin.storage.impl.remote.generated.tables.records.DecksRecord;
import net.tinetwork.tradingcards.tradingcardsplugin.storage.impl.remote.generated.tables.records.PacksContentRecord;
import net.tinetwork.tradingcards.tradingcardsplugin.storage.impl.remote.generated.tables.records.PacksRecord;
import net.tinetwork.tradingcards.tradingcardsplugin.storage.impl.remote.generated.tables.records.RaritiesRecord;
import net.tinetwork.tradingcards.tradingcardsplugin.storage.impl.remote.generated.tables.records.RewardsRecord;
import net.tinetwork.tradingcards.tradingcardsplugin.storage.impl.remote.generated.tables.records.SeriesColorsRecord;
import net.tinetwork.tradingcards.tradingcardsplugin.storage.impl.remote.generated.tables.records.SeriesRecord;

import net.tinetwork.tradingcards.tradingcardsplugin.storage.impl.remote.generated.tables.records.UsersRecord;
import org.jooq.TableField;
import org.jooq.UniqueKey;
import org.jooq.impl.DSL;
import org.jooq.impl.Internal;


/**
 * A class modelling foreign key relationships and constraints of tables in
 * minecraft.
 */
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class Keys {

    // -------------------------------------------------------------------------
    // UNIQUE and PRIMARY KEY definitions
    // -------------------------------------------------------------------------

    public static final UniqueKey<CardsRecord> KEY_CARDS_PRIMARY = Internal.createUniqueKey(Cards.CARDS, DSL.name("KEY_cards_PRIMARY"), new TableField[] { Cards.CARDS.ID }, true);
    public static final UniqueKey<CustomTypesRecord> KEY_CUSTOM_TYPES_PRIMARY = Internal.createUniqueKey(CustomTypes.CUSTOM_TYPES, DSL.name("KEY_custom_types_PRIMARY"), new TableField[] { CustomTypes.CUSTOM_TYPES.TYPE_ID }, true);
    public static final UniqueKey<DecksRecord> KEY_DECKS_PRIMARY = Internal.createUniqueKey(Decks.DECKS, DSL.name("KEY_decks_PRIMARY"), new TableField[] { Decks.DECKS.ID }, true);
    public static final UniqueKey<PacksRecord> KEY_PACKS_PRIMARY = Internal.createUniqueKey(Packs.PACKS, DSL.name("KEY_packs_PRIMARY"), new TableField[] { Packs.PACKS.PACK_ID }, true);
    public static final UniqueKey<PacksContentRecord> KEY_PACKS_CONTENT_PRIMARY = Internal.createUniqueKey(PacksContent.PACKS_CONTENT, DSL.name("KEY_packs_content_PRIMARY"), new TableField[] { PacksContent.PACKS_CONTENT.ID }, true);
    public static final UniqueKey<RaritiesRecord> KEY_RARITIES_PRIMARY = Internal.createUniqueKey(Rarities.RARITIES, DSL.name("KEY_rarities_PRIMARY"), new TableField[] { Rarities.RARITIES.RARITY_ID }, true);
    public static final UniqueKey<RewardsRecord> KEY_REWARDS_PRIMARY = Internal.createUniqueKey(Rewards.REWARDS, DSL.name("KEY_rewards_PRIMARY"), new TableField[] { Rewards.REWARDS.RARITY_ID }, true);
    public static final UniqueKey<SeriesRecord> KEY_SERIES_PRIMARY = Internal.createUniqueKey(Series.SERIES, DSL.name("KEY_series_PRIMARY"), new TableField[] { Series.SERIES.SERIES_ID }, true);
    public static final UniqueKey<SeriesColorsRecord> KEY_SERIES_COLORS_PRIMARY = Internal.createUniqueKey(SeriesColors.SERIES_COLORS, DSL.name("KEY_series_colors_PRIMARY"), new TableField[] { SeriesColors.SERIES_COLORS.SERIES_ID }, true);
    public static final UniqueKey<UsersRecord> KEY_USERS_PRIMARY = Internal.createUniqueKey(Users.USERS, DSL.name("KEY_users_PRIMARY"), new TableField[] { Users.USERS.ID }, true);
}
